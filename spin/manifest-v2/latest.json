{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "AppManifest",
  "description": "App manifest",
  "type": "object",
  "required": [
    "application",
    "spin_manifest_version",
    "trigger"
  ],
  "properties": {
    "application": {
      "description": "`[application]`",
      "allOf": [
        {
          "$ref": "#/definitions/AppDetails"
        }
      ]
    },
    "component": {
      "description": "`[component.<id>]`",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/Component"
      }
    },
    "spin_manifest_version": {
      "description": "`spin_manifest_version = 2`",
      "type": "integer",
      "format": "uint",
      "minimum": 0.0
    },
    "trigger": {
      "description": "The triggers to which the application responds. Most triggers can appear multiple times with different parameters: for example, the `http` trigger may appear multiple times with different routes, or the `redis` trigger with different channels.\n\nExample: `[[trigger.http]]`",
      "allOf": [
        {
          "$ref": "#/definitions/TriggerSchema"
        }
      ]
    },
    "variables": {
      "description": "Application configuration variables. These can be set via environment variables, or from sources such as Hashicorp Vault or Azure KeyVault by using a runtime config file. They are not available directly to components: use a component variable to ingest them.\n\nLearn more: https://spinframework.dev/variables, https://spinframework.dev/dynamic-configuration#application-variables-runtime-configuration",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/Variable"
      }
    }
  },
  "additionalProperties": false,
  "definitions": {
    "AIModel": {
      "description": "The AI models which the component is allowed to access. For local execution, you must download all models; for hosted execution, you should check which models are available in your target environment.\n\nExample: `ai_models = [\"llama2-chat\"]`\n\nLearn more: https://spinframework.dev/serverless-ai-api-guide#using-serverless-ai-from-applications",
      "anyOf": [
        {
          "type": "string"
        }
      ]
    },
    "AllowedOutboundHost": {
      "description": "The network destinations which the component is allowed to access. Each entry is in the form \"(scheme)://(host)[:port]\". Each element allows * as a wildcard e.g. \"https://\\*\" (HTTPS on the default port to any destination) or \"\\*://localhost:\\*\" (any protocol to any port on localhost). The host part allows segment wildcards for subdomains e.g. \"https://\\*.example.com\". Application variables are allowed using `{{ my_var }}`` syntax.\n\nExample: `allowed_outbound_hosts = [\"redis://myredishost.com:6379\"]`\n\nLearn more: https://spinframework.dev/http-outbound#granting-http-permissions-to-components",
      "anyOf": [
        {
          "type": "string"
        }
      ]
    },
    "AppDetails": {
      "description": "App details",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "authors": {
          "description": "The author(s) of the application.\n\n`authors = [\"author@example.com\"]`",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "description": "A human-readable description of the application.\n\nExample: `description = \"App description\"`",
          "type": "string"
        },
        "name": {
          "description": "The name of the application.\n\nExample: `name = \"my-app\"`",
          "type": "string"
        },
        "tool": {
          "description": "Settings for custom tools or plugins. Spin ignores this field.",
          "type": "object"
        },
        "trigger": {
          "description": "Application-level settings for the trigger types used in the application. The possible values are trigger type-specific.\n\nExample:\n\n```ignore [application.triggers.redis] address = \"redis://notifications.example.com:6379\" ```\n\nLearn more (Redis example): https://spinframework.dev/redis-trigger#setting-a-default-server",
          "type": "object"
        },
        "version": {
          "description": "The application version. This should be a valid semver version.\n\nExample: `version = \"1.0.0\"`",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Commands": {
      "description": "The command or commands to build the application. If multiple commands are specified, they are run sequentially from left to right.\n\nExample: `command = \"cargo build\"`, `command = [\"npm install\", \"npm run build\"]`\n\nLearn more: https://spinframework.dev/build#setting-up-for-spin-build",
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      ]
    },
    "Component": {
      "description": "A Spin component.",
      "type": "object",
      "required": [
        "source"
      ],
      "properties": {
        "ai_models": {
          "description": "The AI models which the component is allowed to access. For local execution, you must download all models; for hosted execution, you should check which models are available in your target environment.\n\nExample: `ai_models = [\"llama2-chat\"]`\n\nLearn more: https://spinframework.dev/serverless-ai-api-guide#using-serverless-ai-from-applications",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AIModel"
          }
        },
        "allowed_http_hosts": {
          "description": "Deprecated. Use `allowed_outbound_hosts` instead.\n\nExample: `allowed_http_hosts = [\"example.com\"]`",
          "deprecated": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "allowed_outbound_hosts": {
          "description": "The network destinations which the component is allowed to access. Each entry is in the form \"(scheme)://(host)[:port]\". Each element allows * as a wildcard e.g. \"https://\\*\" (HTTPS on the default port to any destination) or \"\\*://localhost:\\*\" (any protocol to any port on localhost). The host part allows segment wildcards for subdomains e.g. \"https://\\*.example.com\". Application variables are allowed using `{{ my_var }}`` syntax.\n\nExample: `allowed_outbound_hosts = [\"redis://myredishost.com:6379\"]`\n\nLearn more: https://spinframework.dev/http-outbound#granting-http-permissions-to-components",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AllowedOutboundHost"
          }
        },
        "build": {
          "description": "The component build configuration.\n\nLearn more: https://spinframework.dev/build",
          "anyOf": [
            {
              "$ref": "#/definitions/ComponentBuildConfig"
            },
            {
              "type": "null"
            }
          ]
        },
        "dependencies": {
          "description": "Specifies how to satisfy Wasm Component Model imports of this component.\n\nLearn more: https://spinframework.dev/writing-apps#using-component-dependencies",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ComponentDependency"
          }
        },
        "dependencies_inherit_configuration": {
          "description": "If true, dependencies can invoke Spin APIs with the same permissions as the main component. If false, dependencies have no permissions (e.g. network, key-value stores, SQLite databases).\n\nLearn more: https://spinframework.dev/writing-apps#dependency-permissions",
          "type": "boolean"
        },
        "description": {
          "description": "A human-readable description of the component.\n\nExample: `description = \"Shopping cart\"`",
          "type": "string"
        },
        "environment": {
          "description": "Environment variables to be set for the Wasm module.\n\n`environment = { DB_URL = \"mysql://spin:spin@localhost/dev\" }`",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "exclude_files": {
          "description": "Any files or glob patterns that should not be available to the Wasm module at runtime, even though they match a `files`` entry.\n\nExample: `exclude_files = [\"secrets/*\"]`\n\nLearn more: https://spinframework.dev/writing-apps#including-files-with-components",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "files": {
          "description": "The files the component is allowed to read. Each list entry is either:\n\n- a glob pattern (e.g. \"assets/**/*.jpg\"); or\n\n- a source-destination pair indicating where a host directory should be mapped in the guest (e.g. { source = \"assets\", destination = \"/\" })\n\nLearn more: https://spinframework.dev/writing-apps#including-files-with-components",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WasiFilesMount"
          }
        },
        "key_value_stores": {
          "description": "The key-value stores which the component is allowed to access. Stores are identified by label e.g. \"default\" or \"customer\". Stores other than \"default\" must be mapped to a backing store in the runtime config.\n\nExample: `key_value_stores = [\"default\", \"my-store\"]`\n\nLearn more: https://spinframework.dev/kv-store-api-guide#custom-key-value-stores",
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValueStore"
          }
        },
        "source": {
          "description": "The file, package, or URL containing the component Wasm binary.\n\nExample: `source = \"bin/cart.wasm\"`\n\nLearn more: https://spinframework.dev/writing-apps#the-component-source",
          "allOf": [
            {
              "$ref": "#/definitions/ComponentSource"
            }
          ]
        },
        "sqlite_databases": {
          "description": "The SQLite databases which the component is allowed to access. Databases are identified by label e.g. \"default\" or \"analytics\". Databases other than \"default\" must be mapped to a backing store in the runtime config. Use \"spin up --sqlite\" to run database setup scripts.\n\nExample: `sqlite_databases = [\"default\", \"my-database\"]`\n\nLearn more: https://spinframework.dev/sqlite-api-guide#preparing-an-sqlite-database",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SqliteDatabase"
          }
        },
        "tool": {
          "description": "Settings for custom tools or plugins. Spin ignores this field.",
          "type": "object"
        },
        "variables": {
          "description": "Configuration variables available to the component. Names must be in `lower_snake_case`. Values are strings, and may refer to application variables using `{{ ... }}` syntax.\n\n`variables = { users_endpoint = \"https://{{ api_host }}/users\"}`\n\nLearn more: https://spinframework.dev/variables#adding-variables-to-your-applications",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "ComponentBuildConfig": {
      "description": "Component build configuration",
      "type": "object",
      "required": [
        "command"
      ],
      "properties": {
        "command": {
          "description": "The command or commands to build the application. If multiple commands are specified, they are run sequentially from left to right.\n\nExample: `command = \"cargo build\"`, `command = [\"npm install\", \"npm run build\"]`\n\nLearn more: https://spinframework.dev/build#setting-up-for-spin-build",
          "allOf": [
            {
              "$ref": "#/definitions/Commands"
            }
          ]
        },
        "watch": {
          "description": "Source files to use in `spin watch`. This is a set of paths or glob patterns (relative to the build working directory). A change to any matching file causes `spin watch` to rebuild the application before restarting the application.\n\nExample: `watch = [\"src/**/*.rs\"]`\n\nLearn more: https://spinframework.dev/running-apps#monitoring-applications-for-changes",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WatchCommand"
          }
        },
        "workdir": {
          "description": "The working directory for the build command. If omitted, the build working directory is the directory containing `spin.toml`.\n\nExample: `workdir = \"components/main\"\n\nLearn more: https://spinframework.dev/build#overriding-the-working-directory",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "ComponentDependency": {
      "description": "Specifies how to satisfy an import dependency of the component. This may be one of:\n\n- A semantic versioning constraint for the package version to use. Spin fetches the latest matching version of the package whose name matches the dependency name from the default registry.\n\nExample: `\"my:dep/import\" = \">= 0.1.0\"`\n\n- A package from a registry.\n\nExample: `\"my:dep/import\" = { version = \"0.1.0\", registry = \"registry.io\", ...}`\n\n- A package from a filesystem path.\n\nExample: `\"my:dependency\" = { path = \"path/to/component.wasm\", export = \"my-export\" }`\n\n- A package from an HTTP URL.\n\nExample: `\"my:import\" = { url = \"https://example.com/component.wasm\", sha256 = \"sha256:...\" }`\n\nLearn more: https://spinframework.dev/v3/writing-apps#using-component-dependencies",
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "object",
          "required": [
            "version"
          ],
          "properties": {
            "export": {
              "description": "The name of the export in the package. If omitted, this defaults to the name of the import.\n\nExample: `\"my:dep/import\" = { export = \"your:impl/export\", version = \" 0.1.0\" }`\n\nLearn more: https://spinframework.dev/writing-apps#dependencies-from-a-registry",
              "type": [
                "string",
                "null"
              ]
            },
            "package": {
              "description": "The name of the package to use. If omitted, this defaults to the package name of the imported interface.\n\nExample: `\"my:dep/import\" = { package = \"your:implementation\", version = \" 0.1.0\" }`\n\nLearn more: https://spinframework.dev/writing-apps#dependencies-from-a-registry",
              "type": [
                "string",
                "null"
              ]
            },
            "registry": {
              "description": "The registry that hosts the package. If omitted, this defaults to your system default registry.\n\nExample: `\"my:dep/import\" = { registry = \"registry.io\", version = \" 0.1.0\" }`\n\nLearn more: https://spinframework.dev/writing-apps#dependencies-from-a-registry",
              "type": [
                "string",
                "null"
              ]
            },
            "version": {
              "description": "A semantic versioning constraint for the package version to use. Required. Spin fetches the latest matching version from the specified registry, or from the default registry if no registry is specified.\n\nExample: `\"my:dep/import\" = { version = \">= 0.1.0\" }`\n\nLearn more: https://spinframework.dev/writing-apps#dependencies-from-a-registry",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "path"
          ],
          "properties": {
            "export": {
              "description": "The name of the export in the package. If omitted, this defaults to the name of the import.\n\nExample: `\"my:dep/import\" = { export = \"your:impl/export\", path = \"path/to/component.wasm\" }`\n\nLearn more: https://spinframework.dev/writing-apps#dependencies-from-a-local-component",
              "type": [
                "string",
                "null"
              ]
            },
            "path": {
              "description": "The path to the Wasm file that implements the dependency.\n\nExample: `\"my:dep/import\" = { path = \"path/to/component.wasm\" }`\n\nLearn more: https://spinframework.dev/writing-apps#dependencies-from-a-local-component",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "digest",
            "url"
          ],
          "properties": {
            "digest": {
              "description": "The SHA256 digest of the Wasm file. This is required for integrity checking. Must begin with `sha256:`.\n\nExample: `\"my:dep/import\" = { sha256 = \"sha256:...\", ... }`\n\nLearn more: https://spinframework.dev/writing-apps#dependencies-from-a-url",
              "type": "string"
            },
            "export": {
              "description": "The name of the export in the package. If omitted, this defaults to the name of the import.\n\nExample: `\"my:dep/import\" = { export = \"your:impl/export\", ... }`\n\nLearn more: https://spinframework.dev/writing-apps#dependencies-from-a-url",
              "type": [
                "string",
                "null"
              ]
            },
            "url": {
              "description": "The URL to the Wasm component that implements the dependency.\n\nExample: `\"my:dep/import\" = { url = \"https://example.com/component.wasm\", sha256 = \"sha256:...\" }`\n\nLearn more: https://spinframework.dev/writing-apps#dependencies-from-a-url",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ComponentSource": {
      "description": "The file, package, or URL containing the component Wasm binary. This may be:\n\n- The path to a Wasm file (relative to the manifest file)\n\nExample: `source = \"bin/cart.wasm\"`\n\n- The URL of a Wasm file downloadable over HTTP, accompanied by a digest to ensure integrity\n\nExample: `source = { url = \"https://example.com/example.wasm\", digest = \"sha256:6503...2375\" }`\n\n- The registry, package and version of a component from a registry\n\nExample: `source = { registry = \"ttl.sh\", package = \"user:registrytest\", version=\"1.0.0\" }`\n\nLearn more: https://spinframework.dev/writing-apps#the-component-source",
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "object",
          "required": [
            "digest",
            "url"
          ],
          "properties": {
            "digest": {
              "description": "The SHA256 digest of the Wasm component binary. This must be prefixed with `sha256:`.\n\nExample: `digest = `\"sha256:abc123...\"`\n\nLearn more: https://spinframework.dev/writing-apps#the-component-source",
              "type": "string"
            },
            "url": {
              "description": "The URL of the Wasm component binary.\n\nExample: `url = \"https://example.test/remote.wasm\"`\n\nLearn more: https://spinframework.dev/writing-apps#the-component-source",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "package",
            "version"
          ],
          "properties": {
            "package": {
              "description": "The package containing the Wasm component binary.\n\nExample: `package = \"example:component\"`\n\nLearn more: https://spinframework.dev/writing-apps#the-component-source",
              "type": "string"
            },
            "registry": {
              "description": "The registry containing the Wasm component binary.\n\nExample: `registry = \"example.com\"`\n\nLearn more: https://spinframework.dev/writing-apps#the-component-source",
              "type": [
                "string",
                "null"
              ]
            },
            "version": {
              "description": "The version of the package containing the Wasm component binary.\n\nExample: `version = \"1.2.3\"`\n\nLearn more: https://spinframework.dev/writing-apps#the-component-source",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ComponentSpec": {
      "description": "Component reference or inline definition",
      "anyOf": [
        {
          "description": "`\"component-id\"`",
          "allOf": [
            {
              "$ref": "#/definitions/Id_for_-_and_false"
            }
          ]
        },
        {
          "description": "`{ ... }`",
          "allOf": [
            {
              "$ref": "#/definitions/Component"
            }
          ]
        }
      ]
    },
    "HttpPrivateEndpoint": {
      "type": "object",
      "required": [
        "private"
      ],
      "properties": {
        "private": {
          "description": "Whether the private endpoint is private. This must be true.",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "HttpRouteSchema": {
      "anyOf": [
        {
          "description": "The HTTP route that the trigger accepts. The route must begin with a `/``. The route may contain:\n\n- Any number of single-segment wildcards, using the syntax `:name`. It matches only a single segment of a path, and allows further matching on segments beyond it.\n\n- A trailing wildcard, using the syntax `/...`. This matches the given route and any route under it.\n\nIn particular, the route `/...` matches _all_ paths.\n\nExample: `route = \"/user/:name/...\"`\n\nLearn more: https://spinframework.dev/v3/http-trigger#http-trigger-routes",
          "type": "string"
        },
        {
          "description": "The trigger does not response to any external HTTP request, but only to requests via local service chaining.\n\nExample: `route = { private = true }`\n\nLearn more: https://spinframework.dev/v3/http-trigger#private-endpoints",
          "allOf": [
            {
              "$ref": "#/definitions/HttpPrivateEndpoint"
            }
          ]
        }
      ]
    },
    "HttpTriggerSchema": {
      "type": "object",
      "required": [
        "route"
      ],
      "properties": {
        "component": {
          "description": "`component = ...`",
          "anyOf": [
            {
              "$ref": "#/definitions/ComponentSpec"
            },
            {
              "type": "null"
            }
          ]
        },
        "components": {
          "description": "`components = { ... }`",
          "type": "object",
          "additionalProperties": {
            "oneOf": [
              {
                "$ref": "#/definitions/ComponentSpec"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ComponentSpec"
                }
              }
            ]
          }
        },
        "executor": {
          "description": "`executor = { type = \"wagi\" }",
          "default": null,
          "type": "object"
        },
        "id": {
          "description": "`id = \"trigger-id\"`",
          "type": "string"
        },
        "route": {
          "description": "`route = \"/user/:name/...\"`",
          "allOf": [
            {
              "$ref": "#/definitions/HttpRouteSchema"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "Id_for_-_and_false": {
      "description": "An ID is a non-empty string containing one or more component model `word`s separated by a delimiter char.",
      "type": "string"
    },
    "KeyValueStore": {
      "description": "The key-value stores which the component is allowed to access. Stores are identified by label e.g. \"default\" or \"customer\". Stores other than \"default\" must be mapped to a backing store in the runtime config.\n\nExample: `key_value_stores = [\"default\", \"my-store\"]`\n\nLearn more: https://spinframework.dev/kv-store-api-guide#custom-key-value-stores",
      "anyOf": [
        {
          "type": "string"
        }
      ]
    },
    "RedisTriggerSchema": {
      "type": "object",
      "required": [
        "channel"
      ],
      "properties": {
        "address": {
          "description": "`address = \"redis://redis.example.com:6379\"`",
          "type": [
            "string",
            "null"
          ]
        },
        "channel": {
          "description": "`channel = \"my-messages\"`",
          "type": "string"
        },
        "component": {
          "description": "`component = ...`",
          "anyOf": [
            {
              "$ref": "#/definitions/ComponentSpec"
            },
            {
              "type": "null"
            }
          ]
        },
        "components": {
          "description": "`components = { ... }`",
          "type": "object",
          "additionalProperties": {
            "oneOf": [
              {
                "$ref": "#/definitions/ComponentSpec"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ComponentSpec"
                }
              }
            ]
          }
        },
        "id": {
          "description": "`id = \"trigger-id\"`",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "SqliteDatabase": {
      "description": "The SQLite databases which the component is allowed to access. Databases are identified by label e.g. \"default\" or \"analytics\". Databases other than \"default\" must be mapped to a backing store in the runtime config. Use \"spin up --sqlite\" to run database setup scripts.\n\nExample: `sqlite_databases = [\"default\", \"my-database\"]`\n\nLearn more: https://spinframework.dev/sqlite-api-guide#preparing-an-sqlite-database",
      "anyOf": [
        {
          "type": "string"
        }
      ]
    },
    "TriggerSchema": {
      "type": "object",
      "properties": {
        "http": {
          "description": "HTTP triggers",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HttpTriggerSchema"
          }
        },
        "redis": {
          "description": "Redis triggers",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RedisTriggerSchema"
          }
        }
      }
    },
    "Variable": {
      "description": "The name of the application variable.",
      "type": "object",
      "properties": {
        "default": {
          "description": "The value of the variable if no value is supplied at runtime. If specified, the value must be a string. If not specified, `required`` must be `true`.\n\nExample: `default = \"default value\"`\n\nLearn more: https://spinframework.dev/variables#adding-variables-to-your-applications",
          "type": [
            "string",
            "null"
          ]
        },
        "required": {
          "description": "Whether a value must be supplied at runtime. If not specified, required defaults to `false`, and `default` must be provided.\n\nExample: `required = true`\n\nLearn more: https://spinframework.dev/variables#adding-variables-to-your-applications",
          "type": "boolean"
        },
        "secret": {
          "description": "If set, this variable should be treated as sensitive.\n\nExample: `secret = true`\n\nLearn more: https://spinframework.dev/variables#adding-variables-to-your-applications",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "WasiFilesMount": {
      "description": "The files the component is allowed to read. Each list entry is either:\n\n- a glob pattern (e.g. \"assets/**/*.jpg\"); or\n\n- a source-destination pair indicating where a host directory should be mapped in the guest (e.g. { source = \"assets\", destination = \"/\" })\n\nLearn more: https://spinframework.dev/writing-apps#including-files-with-components",
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "object",
          "required": [
            "destination",
            "source"
          ],
          "properties": {
            "destination": {
              "description": "The path where the `source` directory appears in the guest. Must be absolute.\n\n`destination = \"/\"`\n\nLearn more: https://spinframework.dev/writing-apps#including-files-with-components",
              "type": "string"
            },
            "source": {
              "description": "The directory to be made available in the guest.\n\nExample: `source = \"content/dir\"`\n\nLearn more: https://spinframework.dev/writing-apps#including-files-with-components",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "WatchCommand": {
      "description": "Source files to use in `spin watch`. This is a set of paths or glob patterns (relative to the build working directory). A change to any matching file causes `spin watch` to rebuild the application before restarting the application.\n\nExample: `watch = [\"src/**/*.rs\"]`\n\nLearn more: https://spinframework.dev/running-apps#monitoring-applications-for-changes",
      "anyOf": [
        {
          "type": "string"
        }
      ]
    }
  }
}